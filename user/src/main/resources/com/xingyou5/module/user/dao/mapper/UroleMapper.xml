<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xingyou5.module.user.dao.mapper.UroleMapper">

  <insert id="add" parameterType="Urole" keyProperty="uroleId" useGeneratedKeys="true">
		insert into urole(uroleId,uroleName,status,createByUserId,createTime) values (#{uroleId},#{uroleName},#{status},#{createByUserId},CURRENT_TIMESTAMP);                     
  </insert>
  
  <select id="get" parameterType="integer" resultType="Urole">
		select * from urole where  uroleId = #{uroleId}	
  </select>
  
  <update id="update" parameterType="Urole">
		update urole set uroleName=#{uroleName} where uroleId=#{uroleId}
  </update>
  
  <delete id="del" parameterType="integer">
        delete from urole where uroleId=#{uroleId}
  </delete>
  
  <!-- 查询角色-->
  <select id="searchUroles" parameterType="Map" resultType="Urole">
		select  ur.uroleId,ur.uroleName,ur.status,ur.createByUserId,ur.createTime 
	    from urole ur 
        where 1=1
        <if test="createByUserIds!=null and createByUserIds.size()>0">
          and  ur.createByUserId in
          <foreach collection="createByUserIds" item="createByUserId"  open="(" separator="," close=")">  
             #{createByUserId}  
          </foreach>  
        </if>
        <if test="uroleName!=null and uroleName!=''">
          and  ur.uroleName like concat('%',#{uroleName},'%')
        </if>
        <if test="status!=null and status!=''">
          and  ur.status =#{status}
        </if>
		<if test="sort != null and sort != ''">
			order by ${sort}	
			<if test="dir != null and dir != ''">
				${dir}	
			</if>
		</if>
		limit #{start},#{limit}	
  </select>
  <select id="searchUrolesCount" parameterType="Map" resultType="Integer">
		select count(*)  
	    from urole ur 
        where 1=1
        <if test="createByUserIds!=null and createByUserIds.size()>0">
          and  ur.createByUserId in
          <foreach collection="createByUserIds" item="createByUserId"  open="(" separator="," close=")">  
             #{createByUserId}  
          </foreach>  
        </if>
        <if test="uroleName!=null and uroleName!=''">
          and  ur.uroleName like concat('%',#{uroleName},'%')
        </if>
        <if test="status!=null and status!=''">
          and  ur.status =#{status}
        </if>
  </select>
  
  <!-- 批量新增角色资源-->
  <insert id="addUroleUresources"  keyProperty="uroleUresourceId" useGeneratedKeys="true">
		insert into urole_uresource(uroleUresourceId,uroleId,uresourceId) values 
		 <foreach collection="uresourceIds" item="uresourceId" index="index" separator=",">
		(#{uroleUresourceId},#{uroleId},#{uresourceId})
		 </foreach>                   
  </insert>
  
  <!-- 批量删除角色资源-->
  <delete id="delUroleUresources"  >
		delete from urole_uresource where uroleId=#{uroleId} and uresourceId in 
		 <foreach collection="uresourceIds" item="uresourceId" index="index"  open="(" separator="," close=")">
		   #{uresourceId}         
		 </foreach>           
  </delete>
  
  <!-- 根据角色Id 获得资源Id-->
  <select id="listUresourceIdByUroleId" parameterType="integer" resultType="Integer">
		select uresourceId from urole_uresource where  uroleId = #{uroleId}	
  </select>
  
  <!-- 根据角色Id 获得资源-->
  <select id="listUresourceByUroleId" parameterType="integer" resultType="Uresource">
		select ur.uroleId,u.uresourceName,u.uresourceId,u.url,u.isMenu,u.rank,u.parentId from urole_uresource ur join uresource u on ur.uresourceId=u.uresourceId and  ur.uroleId = #{uroleId}	
  </select>
  
  <!-- 更新状态 -->
  <update id="updateStatusByUroleId" >
		update urole set status=#{status} where uroleId=#{uroleId}
  </update>
  
  <!-- 根据创建用户Ids  更新角色状态 -->
  <update id="updateStatusByCuserIds"  >
		update urole set status=#{status} 
        where   createByUserId in
        <foreach collection="createByUserIds" item="createByUserId"  open="(" separator="," close=")">  
             #{createByUserId}  
        </foreach>  
  </update>
  
  <!-- 根据角色名获得角色Id -->
  <select id="getUroleIdByUroleName" parameterType="String" resultType="Integer">
		select uroleId from urole where  uroleName = #{uroleName}	
  </select>
  
    <!-- 根据用户Id获取角色Id-->
  <select id="listNormalUroleIdsByUserId" parameterType="Integer" resultType="Integer">
		select r.uroleId 
		from (select uroleId from user_urole where userId=#{userId} ) ur 
		     join urole r on ur.uroleId=r.uroleId and r.status=${@com.xingyou5.module.user.entity.Urole@STATUS_ABLE}
  </select>
  
    <!-- 根据用户Id获取角色Id-->
  <select id="listNormalUroleByUserId" parameterType="Integer" resultType="Urole">
		select r.uroleId ,r.uroleName
		from (select uroleId from user_urole where userId=#{userId} ) ur 
		     join urole r on ur.uroleId=r.uroleId and r.status=${@com.xingyou5.module.user.entity.Urole@STATUS_ABLE}
  </select>
  
  <!-- 根据用户Id获取角色-->
  <select id="listUrolesByUserId" parameterType="Integer" resultType="Urole">
		select r.uroleId,r.uroleName,r.status,r.createByUserId,r.createTime  
		from (select uroleId from user_urole where userId=#{userId} ) ur 
		     join urole r on ur.uroleId=r.uroleId and r.status=${@com.xingyou5.module.user.entity.Urole@STATUS_ABLE}
  </select>
  
  <!-- 根据用户Id获取创建的角色-->
  <select id="listCreateUrolesByUserId" parameterType="Integer" resultType="Urole">
		select r.uroleId,r.uroleName,r.status,r.createByUserId,r.createTime  
		from  urole r 
		where r.createByUserId=#{userId} and r.status=${@com.xingyou5.module.user.entity.Urole@STATUS_ABLE}
  </select>
  
  <!-- 根据用户Ids获取创建角色Ids -->
  <select id="listCreateUroleIdsByUserIds" parameterType="List" resultType="Integer">
		select r.uroleId
		from  urole r 
		where r.createByUserId in
          <foreach collection="userIds" item="userId"  open="(" separator="," close=")">  
             #{userId}  
          </foreach>  
  </select>
  
  <!-- 根据用户Id获取角色Ids-->
  <select id="listUroleIdsByUserId" parameterType="Integer" resultType="Integer">
		select uroleId from user_urole where userId=#{userId} 
  </select>
  
  <!-- 根据角色Id 获取用户Ids-->
  <select id="listUserIdsByUroleId" parameterType="Integer" resultType="Integer">
		select userId from user_urole where uroleId=#{uroleId} 
  </select>
  
</mapper>